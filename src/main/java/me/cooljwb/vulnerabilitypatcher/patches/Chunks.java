package me.cooljwb.vulnerabilitypatcher.patches;

import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.vehicle.VehicleCreateEvent;
import org.bukkit.event.weather.LightningStrikeEvent;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Chunks extends Patches implements Listener {

    @EventHandler
    public void onEntitySpawn(EntitySpawnEvent event) {
        if (outOfRange(event.getLocation().getBlockX()) || outOfRange(event.getLocation().getBlockZ())) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onLightningStrike(LightningStrikeEvent event) {
        if (outOfRange(event.getLightning().getLocation().getBlockX()) || outOfRange(event.getLightning().getLocation().getBlockZ())) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onVehicle(VehicleCreateEvent event) {
        if (outOfRange(event.getVehicle().getLocation().getBlockX()) || outOfRange(event.getVehicle().getLocation().getBlockZ())) {
            event.setCancelled(true);
        }
    }

    private boolean outOfRange(int value) {
        return value > 29999999 || value < -29999999;
    }
}
