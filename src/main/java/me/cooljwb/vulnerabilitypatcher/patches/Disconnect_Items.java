package me.cooljwb.vulnerabilitypatcher.patches;

import me.cooljwb.vulnerabilitypatcher.SMG;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.Container;
import org.bukkit.block.Jukebox;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.entity.ItemSpawnEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitScheduler;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Disconnect_Items extends Patches implements Listener
{

    // TODO: Add /give disconnect items.

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockDispenseEvent(BlockDispenseEvent event)
    {
        ItemStack item = event.getItem();

        if (isDisconnectItem(item))
        {
            event.setCancelled(true);
            clearItemMeta(item);
        }

        if (containsDisconnectItem(item))
        {
            event.setCancelled(true);
            Container container = (Container) event.getBlock().getState();

            for (int c = 0; c < container.getInventory().getSize(); c++)
            {
                if (container.getInventory().getItem(c) != null)
                {
                    if (container.getInventory().getItem(c).isSimilar(event.getItem()))
                    {
                        clearItemMeta(container.getInventory().getItem(c));
                    }
                }
            }

            notifyViolation("Dispenser", "place", event.getItem().getType() + " with disconnect item in it", event.getBlock().getLocation());
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlaceEvent(BlockPlaceEvent event)
    {
        if (event.getBlockPlaced().getState() instanceof Container)
        {
            Container container = (Container) event.getBlockPlaced().getState();
            String itemSize = itemToString(event.getItemInHand());
            boolean violation = false;

            for (ItemStack item : container.getInventory().getContents())
            {
                //inventoryString.append(itemToString(item));

                if (isDisconnectItem(item) || containsDisconnectItem(item))
                {
                    container.getInventory().remove(item);
                    event.setCancelled(true);
                    violation = true;
                }
            }

            if (itemSize.length() >= 262140)
            {
                event.setCancelled(true);
                clearItemMeta(container.getInventory().getContents());
            }

            if (violation)
            {
                Player player = event.getPlayer();
                msg(player, SMG.ITEM_IN_CONTAINER.msg);
                notifyViolation(player, "place", event.getBlock().getType() + " with disconnect item in it", event.getPlayer().getLocation());
            }
        }

        else if (event.getBlockPlaced().getState() instanceof Jukebox)
        {
            boolean violation = false;

            try
            {
                Jukebox box = (Jukebox) event.getBlockPlaced().getState();

                if (box.getPlaying() != Material.AIR && !box.getPlaying().isRecord())
                {
                    box.setPlaying(Material.AIR);
                    box.setRecord(null);
                    clearItemMeta(box.getRecord());
                    box.setBlockData(null);
                    event.setCancelled(true);
                    violation = true;
                }
            }
            catch (IllegalArgumentException e)
            {
                event.setCancelled(true);
                violation = true;
            }

            if (violation)
            {
                Player player = event.getPlayer();
                msg(player, SMG.ITEM_IN_CONTAINER.msg);
                notifyViolation(player, "place", event.getBlock().getType() + " with non record item in it", event.getPlayer().getLocation());
            }
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntitySpawnEvent(EntitySpawnEvent event)
    {
        removeInvalidValues(event.getEntity()); // Experimental.

        if (event.getEntity() instanceof LivingEntity)
        {
            Entity entity = event.getEntity();
            boolean violation = false;

            try
            {
                if (hasDisconnectItem(entity))
                {
                    event.setCancelled(true);
                    violation = true;
                }
            }
            catch (NullPointerException | IllegalArgumentException e)
            {
                event.setCancelled(true);
                violation = true;
            }

            if (violation)
            {
                notifyViolation("Unknown", "summon", event.getEntity().getName() + " with a disconnect item", event.getEntity().getLocation());
            }
        }

        debug(event);
    }

    @EventHandler
    public void onItemSpawnEvent(ItemSpawnEvent event)
    {
        if (isDisconnectItem(event.getEntity().getItemStack()))
        {
            event.setCancelled(true);
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onInventoryClickEvent(InventoryClickEvent event)
    {
        if (isDisconnectItem(event.getCursor()) || containsDisconnectItem(event.getCursor()))
        {
            Player player = null;
            if (event.getWhoClicked() instanceof Player)
            {
                player = Bukkit.getPlayer(event.getWhoClicked().getUniqueId());

                if (!event.getEventName().equals("InventoryCreativeEvent"))
                {
                    msg(player, SMG.ITEM.msg);
                }
            }

            if (!event.getEventName().equals("InventoryCreativeEvent"))
            {
                notifyViolation(player, "acquire", "disconnect item", player.getLocation());
            }

            BukkitScheduler scheduler = Bukkit.getServer().getScheduler();
            scheduler.scheduleSyncDelayedTask(main, () ->
            {
                if (!event.getSlotType().equals(InventoryType.SlotType.OUTSIDE))
                {
                    event.getWhoClicked().getInventory().getItem(event.getSlot()).setItemMeta(null);
                }
            }, 0L);
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerDropEvent(PlayerDropItemEvent event)
    {
        ItemStack item = event.getItemDrop().getItemStack();

        if (isDisconnectItem(item) || containsDisconnectItem(item))
        {
            event.getItemDrop().remove();
            event.setCancelled(true);
            clearItemMeta(event.getItemDrop().getItemStack());

            Player player = event.getPlayer();
            msg(player, SMG.ITEM.msg);
            notifyViolation(player, "drop", "disconnect item", player.getLocation());
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerInteractEvent(PlayerInteractEvent event)
    {
        if (event.getClickedBlock() != null)
        {
            if (event.getClickedBlock().getState() instanceof Container)
            {
                Block block = event.getClickedBlock();
                Container container = (Container) block.getState();

                StringBuilder inventoryString = new StringBuilder();
                for (ItemStack item : container.getInventory().getContents())
                {
                    if (isDisconnectItem(item) || containsDisconnectItem(item) || itemToString(item).length() >= 65535)
                    {
                        clearItemMeta(item);
                    }
                    inventoryString.append(itemToString(item));
                }

                if (inventoryString.length() >= 262140)
                {
                    event.setCancelled(true);
                    clearItemMeta(container.getInventory().getContents());
                }
            }
        }

        debug(event);
    }

    private boolean hasDisconnectItem(Entity entity)
    {
        if (entity instanceof LivingEntity)
        {
            return isDisconnectItem(((LivingEntity) entity).getEquipment().getChestplate()) || isDisconnectItem(((LivingEntity) entity).getEquipment().getLeggings()) || isDisconnectItem(((LivingEntity) entity).getEquipment().getChestplate()) || isDisconnectItem(((LivingEntity) entity).getEquipment().getHelmet()) || isDisconnectItem(((LivingEntity) entity).getEquipment().getItemInHand());
        }
        return false;
    }
}